PROGRAM Energy
	IMPLICIT NONE
	
	REAL, PARAMETER :: Pi = 3.141572, hBar = 1
	REAL :: eMass = 1, a0 = 2.67975 !In units of Bohr Radius
	INTEGER :: i, j, cntr, row, col, columns !Integers for loops
	INTEGER :: n = 0, m = 0, p = 0!Integers for storing acceptable energy levels
	REAL :: ZLength = 10, ZEnergy, MaxParallelEnergy !Energy is in units of Hartrees
	REAL :: kp, MaxZEnergy, ParallelEnergy, G2
	REAL, DIMENSION(3) :: b1, b2 !Reciprocal lattice vectors 

	Integer, DIMENSION(:,:), allocatable :: Storage 

	ZLength = ZLength * a0

	b1(1) = (3**0.5)/2
	b1(2) = 1/2
	b1(3) = 0

	b2(1) = -(3**0.5)/2
	b2(2) = 1/2
	b2(3) = 0

	do i =1,2
		b1(i) = b1(i) * 4 * Pi / (3 * a0)		
		b2(i) = b2(i) * 4 * Pi / (3 * a0)	
	end do

	!User Input energy ranges and Z Length
	print *, "Input Max Z Energy in Hartrees: "
	read *, MaxZEnergy

	print *, "Input Max Parallel Energy in Hartrees: "
	read *, MaxParallelEnergy

	print *,"Input Z Length in units of Bohr radius: "
	read *, ZLength
	
	ParallelEnergy = 0
	kp = 0
	ZEnergy = 0
	
	n = 0
	m = 1
	p = 0
	cntr = 0
 	
	do while (ZEnergy < MaxZEnergy) 
		
		kp = (p+1) * Pi / ZLength
		ZEnergy = (hBar**2)/(2*eMass) * kp ** 2
		p = p + 1
	end do

	do while (ParallelEnergy < MaxParallelEnergy) 	

		do while (ParallelEnergy < MaxParallelEnergy) 
			
			if (n /= 0) then
				cntr = cntr + 1
			end if
	
			G2 = ((n+1)**2) * dot_product(b1,b1) + (m ** 2) * dot_product(b2,b2) + m * (n+1) * dot_product(b1, b2) !This is G^2 I promise
			ParallelEnergy = (G2 * hBar**2)/(2*eMass)
			
			n = n + 1 	

		end do
		
		n = 0
		m = m + 1
		G2 = ((n+1)**2) * dot_product(b1,b1) + (m ** 2) * dot_product(b2,b2) + m * (n+1) * dot_product(b1, b2) 
		ParallelEnergy = (G2 * hBar**2)/(2*eMass)
	end do

	columns = p * cntr
	allocate(Storage(columns, 3))	
	
	ParallelEnergy = 0
	cntr = 1	
	
	do i=1,p
		m = 1
		n = 0
		ParallelEnergy = 0
		do while (ParallelEnergy < MaxParallelEnergy) 	

			do while (ParallelEnergy < MaxParallelEnergy) 

				if (n /= 0) then
					!print"(2i6)", n, m
					Storage(cntr, 1) = i
					Storage(cntr, 2) = m
					Storage(cntr, 3) = n
					cntr = cntr + 1
				end if
	
				G2 = ((n+1)**2) * dot_product(b1,b1) + (m ** 2) * dot_product(b2,b2) + m * (n+1) * dot_product(b1, b2) 
				ParallelEnergy = (G2 * hBar**2)/(2*eMass)
			
				n = n + 1 	
			end do
		
			n = 0
			m = m + 1
			G2 = ((n+1)**2) * dot_product(b1,b1) + (m ** 2) * dot_product(b2,b2) + m * (n+1) * dot_product(b1, b2) 
			ParallelEnergy = (G2 * hBar**2)/(2*eMass)
		end do
	end do

	
	do row=1,columns
		do col =1,3
			write(*, fmt="(1x,i0)", advance = 'no'), Storage(row, col)
		end do
		print *
	end do

END PROGRAM Energy
